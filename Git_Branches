Git Branches
        What is branch?
            It's one version of your project.
            With git, we can have multiple version of project that exist in parallel.
            Every branch can have independent commits history.

            Ideally, everyone works on their own branch, and then once work is done,
            you can create pull request to apply your changes to the main branch.
            This flow, allows to review code before accepting any changes.

            Use a branch to isolate development work without affecting other branches in the repository.
            Each repository has one default branch, and can have multiple other branches.
            You can merge a branch into another branch using a pull request.


            Commands:

               git branch
               * master
               Master branch should have latest stable and confirmed code.

               Ideally, master branch shouldn't accept direct commits.
               Otherwise, changes can be committed without code review.
               Test lead usually reviews code.
               But if there is no team/test lead then we do peer review.

               Everyone's code must go through review.
               But, test lead can decide/choose the flow.

               Every commit must be reviewed.
               Commit code when you completed some work.

               Commit changes, whenever completed automation of some user story.
               Then, add commit message like for example:
                            "completed automation of VYT-4321 Driver should be able to add fuel logs".
               It is not only about scripts, can also add utilities, fix something.....

               The main idea is that we have to be careful with master branch.

               In applications repository, not testing framework, we can have a lot of branches like for example:
               2.12 - versions of application
               2.13
               2.14
               2.15
               release
               master
               dev
               newfeature
               somedevelopers


               git branch name - to create a new branch
               then we run git branch to see list of branches

               dev
             * master

             * means that we are still on the master branch

             How to switch to new branch?

             git checkout branch_name - to switch to different branch

             git checkout dev

             Switched to branch 'dev'

             git commit -a -m "" to add all files and commit, so you don't need to run git add src/ before commit

             git commit -a -m "added cars.txt"

             [dev c534ea7] added cars.txt
              3 files changed, 73 insertions(+), 9 deletions(-)
              create mode 100644 cars.txt

              if you don't stage files (git add) and miss -a, you will get "Nothing to commit"

              git log - to see history of commits

              enter q to exit log

              git log --oneline - to see short version of log

              git log --all --decorate --oneline --graph - history of all commits

              git branch -d branch_name - delete branch

              git branch -d dev
              Deleted branch dev (was 41537d2).

              git checkout feature
              git push --set-upstream origin feature - connecting local feature branch with remote feature branch (origin)

              If you have this error, you didn't connect local branch with remote.
              fatal: The current branch feature has no upstream branch.
              To push the current branch and set the remote as upstream, use

              To  connect/create new remote branch on github branch:
              git push --set-upstream origin branch_name

              ### Protect master branch from direct commits and enforce pull requests with code review.
                    Code review will improve code quality.
                    Also, we will make sure that master branch has 100% working code.
                    Everyone works on their own branchm and then creates pull request to merge changes with master branch.

              1. Go to settings
              2. Branches
              3. Create rule: master
              4. Select:
                    Require pull request reviews before merging
                    Include administrators
              5. Click create
